// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Category {
    id     Int    @id @default(autoincrement())
    name   String
    room   Room   @relation(fields: [roomId], references: [id])
    roomId Int

    votes   Vote[]
    results Result[]

    @@unique([roomId, name])
    @@index([roomId])
}

model Vote {
    id         BigInt   @id @default(autoincrement())
    userId     String
    user       User     @relation(fields: [userId], references: [id])
    ticket     Ticket   @relation(fields: [ticketId], references: [id])
    ticketId   Int
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    value Decimal

    updatedAt DateTime @default(now()) @updatedAt

    @@unique([userId, ticketId, categoryId])
    @@index([ticketId])
    @@index([categoryId])
    @@index([userId])
    @@index([categoryId, ticketId])
}

model Result {
    id BigInt @id @default(autoincrement())

    ticket     Ticket   @relation(fields: [ticketId], references: [id])
    ticketId   Int
    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    value Decimal

    @@index([ticketId])
    @@index([categoryId])
    @@index([categoryId, ticketId])
}

enum TicketType {
    TASK
    BUG
    STORY
    EPIC
}

model Ticket {
    id       Int        @id @default(autoincrement())
    ticketId String
    title    String
    url      String
    type     TicketType @default(TASK)

    selected Boolean @default(false)
    voting   Boolean @default(false)
    done     Boolean @default(false)

    room   Room @relation(fields: [roomId], references: [id])
    roomId Int

    votes   Vote[]
    results Result[]

    @@unique([roomId, ticketId])
    @@index([roomId])
}

model RoomPointValue {
    id Int @id @default(autoincrement())

    value   Decimal
    display String

    room   Room @relation(fields: [roomId], references: [id])
    roomId Int

    @@unique([roomId, value])
    @@index([roomId])
}

model Room {
    id Int @id @default(autoincrement())

    name String
    slug String @unique @default(cuid())

    owner   User   @relation(fields: [ownerId], references: [id], name: "RoomOwner", onDelete: NoAction, onUpdate: NoAction)
    ownerId String

    tickets    Ticket[]
    categories Category[]
    users      RoomMember[]

    values         RoomPointValue[]
    valueRange     Boolean          @default(true)
    enableQuestion Boolean          @default(true)
    enableCoffee   Boolean          @default(true)

    timerStart DateTime?
    timerEnd   DateTime?
    timer      Boolean   @default(false)

    maxMembers Int @default(100)

    @@index([ownerId])
}

model RoomMember {
    room   Room @relation(fields: [roomId], references: [id])
    roomId Int

    user   User   @relation(fields: [userId], references: [id])
    userId String

    spectator Boolean @default(false)

    @@id([roomId, userId])
    @@index([roomId])
    @@index([userId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    refresh_token_expires_in Int?
    access_token             String? @db.Text
    expires_at               Int?
    created_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    accountName              String?
    accountEmail             String?
    accountImage             String?

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    ownedRooms Room[]       @relation("RoomOwner")
    allRooms   RoomMember[]
    Vote       Vote[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
